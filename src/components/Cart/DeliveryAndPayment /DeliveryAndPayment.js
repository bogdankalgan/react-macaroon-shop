import React, {useEffect, useState} from "react";
import styles from "./DeliveryAndPayment.module.css";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import PinkButton from "../../Corporatives/PinkButton";

function DeliveryAndPayment({onUpdate, finalTotal, onSubmit}) {
    const [state, setState] = useState({
        name: "",
        phone: "",
        address: "",
        delivery: "",
        payment: "",
        date: "",
        time: "",
        comment: "",
    })

    const deliveryPrice = state.delivery === "courier" ? 400 : 0;

    useEffect(() => {
        onUpdate({...state, deliveryPrice})
    }, [state, deliveryPrice, onUpdate])

    const handleChange = (e) => {
        const {name, value} = e.target;
        setState((prev) => ({...prev, [name]: value}))
    }

    const handleSubmit = async (e) => {
        e.preventDefault();


        if(state.payment === "cash") {
            alert("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏")
        } else if (state.payment === 'online') {
            const items = finalTotal?.items || [];
            if (!items.length) {
                console.error("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã");
                return alert("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            }

            const usdRate = 90;

            const line_items = items.map(item => {
                const quantity = item.quantity || item.count || 1;

                if (item.price_id) {
                    return {
                        price: item.price_id,
                        quantity
                    };
                } else {
                    return {
                        price_data: {
                            currency: "usd",
                            product_data: {
                                name: item.name || "–ö–∞—Å—Ç–æ–º–Ω—ã–π –Ω–∞–±–æ—Ä",
                                description: item.description || ""
                            },
                            unit_amount: Math.round((item.price / usdRate) * 100)
                        },
                        quantity
                    };
                }
            });


            try {
                const response = await fetch("https://stripe-back-beta.vercel.app/api/create-checkout-session", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ line_items: line_items })
                });

                const data = await response.json();
                console.log("üéØ –û—Ç–≤–µ—Ç Stripe:", data);
                if (data.url) {
                    window.location.href = data.url;
                } else {
                    throw new Error("Stripe session URL –Ω–µ –ø–æ–ª—É—á–µ–Ω");
                }
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ Stripe:", error);
                alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }

        } else if (state.payment === 'applepay') {
            const totalAmountRub = typeof finalTotal === 'object'
              ? Number(finalTotal.total)
              : Number(finalTotal);

            const totalAmountUsd = Math.round(totalAmountRub / 90);

            if (!totalAmountUsd || isNaN(totalAmountUsd) || totalAmountUsd <= 0) {
                console.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è Apple Pay (usd):", totalAmountUsd);
                return alert("–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è");
            }

            console.log("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Apple Pay: USD =", totalAmountUsd);

            if (!window.Stripe) {
                return alert("Apple Pay –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ");
            }
            const stripe = window.Stripe("pk_test_51R6DaOH6MqYhcDi3LMz3N61TkFdRnv0RHY2TjArdkQ95KSiF04zBKhlaiAuDtp7m9nFzFwZhoutY3UGKOpN7SiG800k1x8r7KN");

            const paymentRequest = stripe.paymentRequest({
                country: 'US',
                currency: 'usd',
                total: {
                    label: "–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞",
                    amount: totalAmountUsd * 100,
                },
                requestPayerName: true,
                requestPayerEmail: true,
            });

            const canMakePayment = await paymentRequest.canMakePayment();
            console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç canMakePayment:", canMakePayment);
            if (canMakePayment) {
                paymentRequest.show();
            } else {
                alert("Apple Pay –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }
        }
    }

    return (
        <div>
            <div>
                <h3 className="titleSecond">–î–æ—Å—Ç–∞–≤–∫–∞</h3>
                <p className={styles.DeliveryAndPaymentDescr}>–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏</p>
            </div>

            <form className={styles.DeliveryAndPaymentForm} onSubmit={handleSubmit}>
                <div className={styles.DeliveryAndPaymentBlock}>
                <label className={styles.DeliveryAndPaymentLabel}>
                    –í–∞—à–µ –∏–º—è*
                    <input name="name" placeholder="–ò–º—è" onChange={handleChange} required={true}/>
                </label>

                <label className={styles.DeliveryAndPaymentLabel}>
                    –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω*
                    <input name="phone" placeholder="+7 (___) ___-__-__" onChange={handleChange} required={true}/>
                </label>
                </div>

                <div>
                <h4 className={styles.DeliveryAndPaymentSubtitle}>–°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏:</h4>
                    <div className={styles.DeliveryRadioGroup}>
                      <label
                        className={`${styles.DeliveryRadio} ${
                          state.delivery === "courier" ? styles.DeliveryRadioActive : ""
                        }`}
                      >
                          <img src="/icons/deliveryAndPayment/1.svg" alt=""/>
                          <div>
                        <input
                          type="radio"
                          name="delivery"
                          value="courier"
                          checked={state.delivery === "courier"}
                          onChange={handleChange}
                        />
                        <span>–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</span>
                        <p>400 —Ä—É–±.</p>
                          </div>
                      </label>

                      <label
                        className={`${styles.DeliveryRadio} ${
                          state.delivery === "pickup" ? styles.DeliveryRadioActive : ""
                        }`}
                      >
                          <img src="/icons/deliveryAndPayment/2.svg" alt=""/>
                          <div>
                              <input
                                  type="radio"
                                  name="delivery"
                                  value="pickup"
                                  checked={state.delivery === "pickup"}
                                  onChange={handleChange}
                              />
                              <span>–°–∞–º–æ–≤—ã–≤–æ–∑</span>
                              <p>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</p>
                          </div>
                      </label>
                    </div>
                </div>
                {state.delivery === 'courier' && (
                    <label className={styles.DeliveryAndPaymentLabel}>
                        –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
                        <input name="address" placeholder="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏" onChange={handleChange}/>
                    </label>
                )}

                <div className={styles.DeliveryAndPaymentBlock}>
                <label className={styles.DeliveryAndPaymentLabel}>
                    –î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è
                <DatePicker
                    selected={state.date}
                    onChange={(date) => setState((prev) => ({ ...prev, date }))}
                    dateFormat='dd.MM.yyyy'
                    placeholderText="–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É"
                />
                </label>

                <label className={styles.DeliveryAndPaymentLabel}>
                –í—Ä–µ–º—è
                <select>
                    <option value="12:00-16:00">12:00-16:00</option>
                    <option value="16:00-18:00">16:00-18:00</option>
                </select>
                </label>
                </div>

                <label className={styles.DeliveryAndPaymentLabel}>
                    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
                <textarea name="comment"
                          placeholder="–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏, —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∏ –∏ –¥—Ä—É–≥–æ–µ."
                          onChange={handleChange}></textarea>
                </label>

                <div className={styles.DeliveryPayment}>
                    <h4>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: </h4>

                    <div className={styles.PaymentMethodGroup}>
                        <label>
                            <input type="radio" name="payment" value="online" checked={state.payment === "online"} onChange={handleChange}/>
                            <span>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω</span>
                        </label>

                        <label>
                            <input type="radio" name="payment" value="cash" checked={state.payment === "cash"} onChange={handleChange}/>
                            <span>–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏</span>
                        </label>

                        <label>
                            <input type="radio" name="payment" value="applepay" checked={state.payment === "applepay"} onChange={handleChange}/>
                            <span>ApplePay</span>
                        </label>
                    </div>

                    <div className={styles.DeliveryPaymentTotal}>
                        <p>
                            {state.delivery === "courier" ? "–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –≤–º–µ—Å—Ç–µ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π: " : "–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: "}
                        </p>
                        <p>{finalTotal.total} —Ä—É–±</p>
                    </div>

                    <div onClick={handleSubmit}>
                        <PinkButton text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"/>
                    </div>
                </div>

                <p>
                    –ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑" –Ø –ø—Ä–∏–Ω–∏–º–∞—é –∏ —Å–æ–≥–ª–∞—à–∞—é—Å—å —Å –î–æ–≥–æ–≤–æ—Ä–æ–º –æ—Ñ–µ—Ä—Ç—ã –∏ —Ä–∞–∑—Ä–µ—à–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                </p>
            </form>
        </div>
    )
}

export default DeliveryAndPayment;
